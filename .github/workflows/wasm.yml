name: WASM

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo install wasm-pack
      - name: Run wasm specific tests
        working-directory: tools/garaga_rs
        run: wasm-pack test --node --release --no-default-features

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and check for changes in generated code
        working-directory: tools/npm/garaga_ts
        run: |
          docker compose up --build --exit-code-from app
          git status --porcelain
          [[ -z $(git status --porcelain ) ]]
      - name: Upload package file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: tools/npm/garaga_ts/*.tgz
          if-no-files-found: error

  test-integration:
    name: Test integration
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install Puppeteer dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3 libxss1 libasound2 libatk-bridge2.0-0 libatk1.0-0 \
            libcups2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 \
            libpango-1.0-0 libpangocairo-1.0-0 libpangoft2-1.0-0 libgtk-3-0
      - name: Download package file as artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-package
          path: tools/npm/garaga_ts
      - name: Build and tests integration test packages
        working-directory: tools/npm/integration-test-suite
        run: |
          cp ../garaga_ts/garaga-*.tgz garaga.tgz
          npm i
          npm run build
          npx puppeteer browsers install
          npm run test

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"  # Only run on tag pushes
    needs: [build, test, test-integration]
    steps:
      - uses: actions/checkout@v4  # Need checkout to access generator.py
      - uses: actions/setup-python@v5  # Need Python for verification
        with:
          python-version: '3.9'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install "starknet-py>=0.24.0"
      - name: Verify Contract Declaration
        run: |
          python -c "
          import asyncio
          import sys
          import ast
          from starknet_py.net.full_node_client import FullNodeClient

          # Parse hash from generator.py
          try:
              with open('hydra/garaga/starknet/groth16_contract_generator/generator.py', 'r') as f:
                  tree = ast.parse(f.read())
                  for node in ast.walk(tree):
                      if isinstance(node, ast.Assign) and len(node.targets) == 1:
                          if getattr(node.targets[0], 'id', None) == 'ECIP_OPS_CLASS_HASH':
                              class_hash = hex(node.value.value)
                              break
              print(f'Using class hash: {class_hash}')
          except Exception as e:
              print(f'Error parsing generator.py: {str(e)}', file=sys.stderr)
              sys.exit(1)

          async def verify_networks():
              # Check Sepolia
              print('\nVerifying on Sepolia...')
              sepolia = FullNodeClient('https://free-rpc.nethermind.io/sepolia-juno')
              try:
                  sepolia_result = await sepolia.get_class_by_hash(class_hash)
                  if not sepolia_result:
                      print('Error: Contract not declared on Sepolia', file=sys.stderr)
                      sys.exit(1)
                  print('✓ Contract verified on Sepolia')
              except Exception as e:
                  print(f'Error checking Sepolia: {str(e)}', file=sys.stderr)
                  sys.exit(1)

              # Check Mainnet
              print('\nVerifying on Mainnet...')
              mainnet = FullNodeClient('https://free-rpc.nethermind.io/mainnet-juno')
              try:
                  mainnet_result = await mainnet.get_class_by_hash(class_hash)
                  if not mainnet_result:
                      print('Error: Contract not declared on Mainnet', file=sys.stderr)
                      sys.exit(1)
                  print('✓ Contract verified on Mainnet')
              except Exception as e:
                  print(f'Error checking Mainnet: {str(e)}', file=sys.stderr)
                  sys.exit(1)

              print('\n✓ Contract verified on both networks')
              
          asyncio.run(verify_networks())
          "
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://registry.npmjs.org'
      - name: Download package file as artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-package
      - name: Publish to npm
        run: |
          npm login
          npm publish --access=public *.tgz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_API_TOKEN }}